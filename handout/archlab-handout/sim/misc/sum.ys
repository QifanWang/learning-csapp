# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp	# set up stack pointer
	call main		# Execute main program
	halt			# Terminate program

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1, %rdi
	call sum_list		# sum_list(ele1)
	ret

# long sum_list(list_ptr ls)
# ls in %rdi
sum_list:
	xorq %rax, %rax	# val = 0
loop:
	andq %rdi, %rdi
	je end			# loop condition
	mrmovq (%rdi), %rcx	# ls->val in rcx
	addq %rcx, %rax	# val += ls->val
	irmovq $8, %rbx
	addq %rbx, %rdi	# &(ls->next) in rdi
	mrmovq (%rdi), %rdi	# ls = ls->next
	jmp loop
end:
	ret
	
# Stack starts here and grows to lower address
	.pos 0x200
stack:
