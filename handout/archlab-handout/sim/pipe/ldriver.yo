                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | # You can modify this portion
                            | #	# Loop header
                            | #	xorq %rax,%rax		# count = 0;
                            | #	andq %rdx,%rdx		# len <= 0?
                            | #	jle Done		# if so, goto Done:
                            | #
                            | #Loop:	mrmovq (%rdi), %r10	# read val from src...
                            | #	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | #	andq %r10, %r10		# val <= 0?
                            | #	jle Npos		# if so, goto Npos:
                            | #	irmovq $1, %r10
                            | #	addq %r10, %rax		# count++
                            | #Npos:	irmovq $1, %r10
                            | #	subq %r10, %rdx		# len--
                            | #	irmovq $8, %r10
                            | #	addq %r10, %rdi		# src++
                            | #	addq %r10, %rsi		# dst++
                            | #	andq %rdx,%rdx		# len > 0?
                            | #	jg Loop			# if so, goto Loop:
                            | 
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
0x034: 2021                 | 	rrmovq %rdx, %rcx
0x036: c0f1f9ffffffffffffff | 	iaddq $-7, %rcx
0x040: 719901000000000000   | 	jle Old
0x049:                      | Seven:
0x049: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x053: 50970800000000000000 |         mrmovq 8(%rdi), %r9
0x05d: 50a71000000000000000 |         mrmovq 16(%rdi), %r10
0x067: 50b71800000000000000 |         mrmovq 24(%rdi), %r11
0x071: 50c72000000000000000 |         mrmovq 32(%rdi), %r12
0x07b: 50d72800000000000000 |         mrmovq 40(%rdi), %r13
0x085: 50e73000000000000000 |         mrmovq 48(%rdi), %r14
0x08f: 40860000000000000000 |         rmmovq %r8, (%rsi)
0x099: 40960800000000000000 |         rmmovq %r9, 8(%rsi)
0x0a3: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)
0x0ad: 40b61800000000000000 |         rmmovq %r11, 24(%rsi)
0x0b7: 40c72000000000000000 |         rmmovq %r12, 32(%rdi)
0x0c1: 40d72800000000000000 |         rmmovq %r13, 40(%rdi)
0x0cb: 40e73000000000000000 |         rmmovq %r14, 48(%rdi)
0x0d5: 6288                 | ele0:	andq %r8, %r8
0x0d7: 71ea00000000000000   | 	jle ele1
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x0ea: 6299                 | ele1:	andq %r9, %r9
0x0ec: 71ff00000000000000   | 	jle ele2
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff: 62aa                 | ele2:	andq %r10, %r10
0x101: 711401000000000000   | 	jle ele3
0x10a: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x114: 62bb                 | ele3:	andq %r11, %r11
0x116: 712901000000000000   | 	jle ele4
0x11f: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x129: 62cc                 | ele4:	andq %r12, %r12
0x12b: 713e01000000000000   | 	jle ele5
0x134: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x13e: 62dd                 | ele5:	andq %r13, %r13
0x140: 715301000000000000   | 	jle ele6
0x149: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x153: 62ee                 | ele6:	andq %r14, %r14
0x155: 716801000000000000   | 	jle Tail
0x15e: c0f00100000000000000 | 	iaddq $1, %rax
0x168:                      | Tail:
0x168: c0f73800000000000000 | 	iaddq $56, %rdi
0x172: c0f63800000000000000 | 	iaddq $56, %rsi
0x17c: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx
0x186: c0f1f9ffffffffffffff | 	iaddq $-7, %rcx
0x190: 764900000000000000   | 	jg Seven
                            | 	
0x199: 6222                 | Old:	andq %rdx,%rdx		# len <= 0?
0x19b: 710602000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x1a4: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x1ae: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1b8: c0fa0000000000000000 | 	iaddq $0, %r10		# val <= 0?
0x1c2: 71d501000000000000   | 	jle Npos		# if so, goto Npos:
0x1cb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1d5: c0f2ffffffffffffffff | Npos:	iaddq $-1, %rdx	# len--
0x1df: c0f70800000000000000 | 	iaddq $8, %rdi			# src++
0x1e9: c0f60800000000000000 | 	iaddq $8, %rsi			# dst++
0x1f3: c0f20000000000000000 | 	iaddq $0, %rdx		# len > 0?
0x1fd: 76a401000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x206:                      | Done:
0x206: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x207:                      | End:
                            | #/* $end ncopy-ys */
0x207:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x208:                      | 	.align 8
0x208:                      | src:
0x208: 0100000000000000     | 	.quad 1
0x210: 0200000000000000     | 	.quad 2
0x218: 0300000000000000     | 	.quad 3
0x220: 0400000000000000     | 	.quad 4
0x228: fbffffffffffffff     | 	.quad -5
0x230: 0600000000000000     | 	.quad 6
0x238: f9ffffffffffffff     | 	.quad -7
0x240: 0800000000000000     | 	.quad 8
0x248: f7ffffffffffffff     | 	.quad -9
0x250: 0a00000000000000     | 	.quad 10
0x258: 0b00000000000000     | 	.quad 11
0x260: 0c00000000000000     | 	.quad 12
0x268: f3ffffffffffffff     | 	.quad -13
0x270: f2ffffffffffffff     | 	.quad -14
0x278: f1ffffffffffffff     | 	.quad -15
0x280: 1000000000000000     | 	.quad 16
0x288: 1100000000000000     | 	.quad 17
0x290: 1200000000000000     | 	.quad 18
0x298: 1300000000000000     | 	.quad 19
0x2a0: ecffffffffffffff     | 	.quad -20
0x2a8: ebffffffffffffff     | 	.quad -21
0x2b0: 1600000000000000     | 	.quad 22
0x2b8: 1700000000000000     | 	.quad 23
0x2c0: 1800000000000000     | 	.quad 24
0x2c8: 1900000000000000     | 	.quad 25
0x2d0: e6ffffffffffffff     | 	.quad -26
0x2d8: e5ffffffffffffff     | 	.quad -27
0x2e0: e4ffffffffffffff     | 	.quad -28
0x2e8: e3ffffffffffffff     | 	.quad -29
0x2f0: e2ffffffffffffff     | 	.quad -30
0x2f8: e1ffffffffffffff     | 	.quad -31
0x300: 2000000000000000     | 	.quad 32
0x308: dfffffffffffffff     | 	.quad -33
0x310: deffffffffffffff     | 	.quad -34
0x318: ddffffffffffffff     | 	.quad -35
0x320: 2400000000000000     | 	.quad 36
0x328: 2500000000000000     | 	.quad 37
0x330: 2600000000000000     | 	.quad 38
0x338: 2700000000000000     | 	.quad 39
0x340: 2800000000000000     | 	.quad 40
0x348: 2900000000000000     | 	.quad 41
0x350: 2a00000000000000     | 	.quad 42
0x358: 2b00000000000000     | 	.quad 43
0x360: 2c00000000000000     | 	.quad 44
0x368: d3ffffffffffffff     | 	.quad -45
0x370: 2e00000000000000     | 	.quad 46
0x378: d1ffffffffffffff     | 	.quad -47
0x380: d0ffffffffffffff     | 	.quad -48
0x388: 3100000000000000     | 	.quad 49
0x390: ceffffffffffffff     | 	.quad -50
0x398: cdffffffffffffff     | 	.quad -51
0x3a0: 3400000000000000     | 	.quad 52
0x3a8: 3500000000000000     | 	.quad 53
0x3b0: caffffffffffffff     | 	.quad -54
0x3b8: c9ffffffffffffff     | 	.quad -55
0x3c0: c8ffffffffffffff     | 	.quad -56
0x3c8: c7ffffffffffffff     | 	.quad -57
0x3d0: c6ffffffffffffff     | 	.quad -58
0x3d8: c5ffffffffffffff     | 	.quad -59
0x3e0: c4ffffffffffffff     | 	.quad -60
0x3e8: c3ffffffffffffff     | 	.quad -61
0x3f0: c2ffffffffffffff     | 	.quad -62
0x3f8: c1ffffffffffffff     | 	.quad -63
0x400: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x410:                      | 	.align 16
0x410:                      | Predest:
0x410: fadebc0000000000     | 	.quad 0xbcdefa
0x418:                      | dest:
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610:                      | Postdest:
0x610: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x618:                      | .align 8
                            | # Run time stack
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
                            | 
0x698:                      | Stack:
