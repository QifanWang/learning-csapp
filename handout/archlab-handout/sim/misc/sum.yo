                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp	# set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program
                            | 
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1, %rdi
0x052: 805c00000000000000   | 	call sum_list		# sum_list(ele1)
0x05b: 90                   | 	ret
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | sum_list:
0x05c: 6300                 | 	xorq %rax, %rax	# val = 0
0x05e:                      | loop:
0x05e: 6277                 | 	andq %rdi, %rdi
0x060: 739400000000000000   | 	je end			# loop condition
0x069: 50170000000000000000 | 	mrmovq (%rdi), %rcx	# ls->val in rcx
0x073: 6010                 | 	addq %rcx, %rax	# val += ls->val
0x075: 30f30800000000000000 | 	irmovq $8, %rbx
0x07f: 6037                 | 	addq %rbx, %rdi	# &(ls->next) in rdi
0x081: 50770000000000000000 | 	mrmovq (%rdi), %rdi	# ls = ls->next
0x08b: 705e00000000000000   | 	jmp loop
0x094:                      | end:
0x094: 90                   | 	ret
                            | 	
                            | # Stack starts here and grows to lower address
0x200:                      | 	.pos 0x200
0x200:                      | stack:
